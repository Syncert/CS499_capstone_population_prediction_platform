services:
  db:
    image: postgres:16
    container_name: popdb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro   # runs *.sql on first start
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    # IMPORTANT: build from repo root so Docker sees pyproject.toml + src/
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: popapi
    env_file: .env
    environment:
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT:-8000}:8000"
    # Dev-only hot reload: mount *src* (not api/app) and point uvicorn at the package
    volumes:
      - ./src:/app/src
      - ./models:/app/models:ro
    command: uvicorn ppp_api.main:app --host 0.0.0.0 --port 8000 --reload
    # For production, drop volumes+command and keep the Dockerfile's CM
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport urllib.request,sys\ntry:\n  r=urllib.request.urlopen('http://localhost:8000/health', timeout=5)\n  sys.exit(0 if r.status==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s   # give uvicorn & model loading breathing room
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }
    user: "${UID}:${GID}"


  etl:
    # Optional worker that installs the [etl] extra and runs a module
    build:
      context: .
      dockerfile: etl/Dockerfile
    container_name: popetl
    env_file: .env
    volumes:
      - ./artifacts:/app/artifacts  # host ./artifacts <-> /app/artifacts
    environment:
      DB_HOST: db
      RUN_ACS: "1"
      RUN_LAUS: "1"
      RUN_FRED: "1"
    depends_on:
      db:
        condition: service_healthy
    # run your sample job; swap in your real module when ready
    command: python -m ppp_etl.jobs.sample_census_ingest
    profiles: ["etl"]    # run with: docker compose --profile etl up
    restart: "no"         # one-shot job (keeps logs clean); change if you schedule it
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }
    user: "${UID}:${GID}"


  ui:
    image: node:20-alpine
    container_name: ppui
    working_dir: /app
    ports:
      - "5173:5173"
    volumes:
      - ./ui:/app
      - ui_node:/app/node_modules
    depends_on:
      api:
        condition: service_healthy
    command: >
      sh -lc "npm install --no-fund --no-audit
      && npm run dev -- --host 0.0.0.0"


volumes:
  pgdata:
  ui_node: